import pathlib


# PATHS
CHECKPOINT_DIR = pathlib.Path('/checkpoints')
BBOX_PRIORS_GEN_FILE = CHECKPOINT_DIR / 'priors/bbox_priors_gen.pkl'

# - TRAIN -
TRAIN_IMAGE_DIR = pathlib.Path('../../Data/Yeast/batch_2/train/images')
TRAIN_BBOX_CSV_FILE = pathlib.Path('../../Data/Yeast/batch_2/train/labels.csv')
TRAIN_CONTINUE = False

# - INFERENCE -
INFERENCE_IMAGE_DIR = pathlib.Path('../../Data/Yeast/batch_2/inference/images')

DELETE_ON_FINISH = True

# > AWS
AWS_INPUT_BUCKET_NAME = ''
AWS_INPUT_BUCKET_SUBDIR = ''
AWS_INPUT_REGION = ''

# - OUTPUT -
OUTPUT_DIR = pathlib.Path('./detections')

TEMP_DIR = pathlib.Path('./temp')

CONFIGS_DIR_PATH = pathlib.Path('./configs')

MODEL_CONFIGS_DIR_PATH = CONFIGS_DIR_PATH / 'model'

# CONTROL VARIABLES
DEBUG_LEVEL = 0
PROFILE = False

# CONSTANTS
EPSILON = 1e-7

# DATA
PREPROCESS_IMAGE = True
ORIGINAL_IMAGE_WIDTH = 1024
ORIGINAL_IMAGE_HEIGHT = 1088
IMAGE_SIZE = 256
INFO_BAR_HEIGHT = 70

# SHUFFLE
SHUFFLE = True

# PREPROCESSING CONFIGS
# - Standardized image is computed as follows:
# S = (I - E[I]) / (E[I^2] - E[I]^2)
# STANDARDIZE_IMAGE = False

# TRAINING

# - OPTIMIZER
LEARNING_RATE = 1e-4
OPTIMIZER = 'adam'
OPTIMIZER_RHO = 0.95
OPTIMIZER_BETA_1 = 0.9
OPTIMIZER_BETA_2 = 0.999
OPTIMIZER_MOMENTUM = 0.01

# - REGULARIZER
KERNEL_REGULARIZER_TYPE = 'l2'
KERNEL_REGULARIZER_L1 = 0.01
KERNEL_REGULARIZER_L2 = 0.01
KERNEL_REGULARIZER_FACTOR = 0.01
KERNEL_REGULARIZER_MODE = 'rows'

FALSE_POSITIVES_WEIGHT = .9
FALSE_NEGATIVES_WEIGHT = 1.2

IOU_THRESHOLD = 0.3
TRAIN_SCORE_THRESHOLD = 0.8
INFERENCE_SCORE_THRESHOLD = 0.85
N_TOP_PREDS = 100

# - Priors
PRIORS_N_CLUSTERS = 5
PRIORS_N_ITERATIONS = 100
PRIORS_MIN_IMPROVEMENT_DELTA = 0.1

METRICS = []

#  Variables
EPOCHS = 200
BATCH_SIZE = 6
VALIDATION_BATCH_SIZE = 10
VALIDATION_PROPORTION = .2
N_LOGS = 5

# > CALLBACKS
# - Tensor Board
TENSOR_BOARD = True
TENSOR_BOARD_WRITE_IMAGES = True
TENSOR_BOARD_WRITE_STEPS_PER_SECOND = True
TENSOR_BOARD_UPDATE_FREQ = 'epoch'
TENSOR_BOARD_SCALARS_LOG_INTERVAL = 1
TENSOR_BOARD_IMAGES_LOG_INTERVAL = 1

# -> Launch Tensor Board
TENSOR_BOARD_LAUNCH = True

# - Early Stopping
EARLY_STOPPING = False
EARLY_STOPPING_MONITOR = 'val_loss'
EARLY_STOPPING_PATIENCE = 10
EARLY_STOPPING_MIN_DELTA = 0.001
EARLY_STOPPING_MODE = 'auto'
EARLY_STOPPING_RESTORE_BEST_WEIGHTS = True
EARLY_STOPPING_VERBOSE = 1

# - Terminate on NaN
TERMINATE_ON_NAN = True

# - LR Reduce
REDUCE_LR_ON_PLATEAU = True
REDUCE_LR_ON_PLATEAU_MONITOR = 'val_loss'
REDUCE_LR_ON_PLATEAU_FACTOR = 0.5
REDUCE_LR_ON_PLATEAU_PATIENCE = 5
REDUCE_LR_ON_PLATEAU_MIN_DELTA = 0.01
REDUCE_LR_ON_PLATEAU_COOLDOWN = 0
REDUCE_LR_ON_PLATEAU_MIN_LR = 1e-7
REDUCE_LR_ON_PLATEAU_MODE = 'auto'
REDUCE_LR_ON_PLATEAU_VERBOSE = 1

# - Model Checkpoint
MODEL_CHECKPOINT = True
MODEL_CHECKPOINT_FILE_TEMPLATE = 'checkpoints/cp-{epoch:04d}.ckpt'  # <- may be used in case we want to save all teh check points, and not only the best
MODEL_CHECKPOINT_FILE_BEST_MODEL_TEMPLATE = 'checkpoints/best_model.ckpt'  # <- overwrites the second-best model weights in case MODEL_CHECKPOINT_SAVE_BEST_ONLY = True
MODEL_CHECKPOINT_MONITOR = 'val_loss'
MODEL_CHECKPOINT_VERBOSE = 1
MODEL_CHECKPOINT_SAVE_BEST_ONLY = True
MODEL_CHECKPOINT_MODE = 'auto'
MODEL_CHECKPOINT_SAVE_WEIGHTS_ONLY = True
MODEL_CHECKPOINT_SAVE_FREQ = 'epoch'
